Y.vent
fit.vent <- manova(Y.vent ~ Season*Population)
summary(fit.vent)
anova(fit.vent)
summary.aov(fit.vent)
library("genepop", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("parrallelnewhybrid")
snake <- (sensmodel(c(360,482,554), range=c(300,700), beta=FALSE))
library("pavo", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
snake <- (sensmodel(c(360,482,554), range=c(300,700), beta=FALSE))
snake
plot(snake, col=spec2rgb(snake), ylab='Absorbance', cex=1)
library("pavo", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
snake <- (sensmodel(c(360,482,554), range=c(300,700), beta=FALSE))
plot(snake, col=spec2rgb(snake), ylab='Absorbance', cex=1)
install.packages("parallelnewhybrid")
detach("package:pavo", unload=TRUE)
install.packages("hybriddetective")
install.packages("stagePop")
library("stagePop", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
citation("stats")
library(nlme)
library(plyr)
library(Matrix)
devtools::install_github("nspope/corMLPE")
library(devtools)
devtools::install_github("nspope/corMLPE")
tz
Sys.setenv(TZ="Europe/Berlin")
Sys.getenv("TZ")
as.POSIXct(t, tz=getOption("tz"))
as.POSIXct("2014-05-24 12:45", format = "%Y-%m-%d %H:%M")
as.POSIXct("2017-11-28 11:45", format = "%Y-%m-%d %H:%M")
as.POSIXct("2017-11-24 11:45", "%Y-%m-%d %H:%M", tz = "America/New_York")
devtools::install_github("nspope/corMLPE")
Sys.setenv(TZ="Europe/Berlin")
Sys.getenv("TZ")
as.POSIXct(t, tz=getOption("tz"))
R.version
ls -l /Library/Frameworks/R.framework/Versions/
sgdfvdfa
-l /Library/Frameworks/R.framework/Versions/
sdgagsg
/Library/Frameworks/R.framework/Versions/
install.packages(c("adegenet", "backports", "BH", "boot", "car", "checkmate", "cowplot", "crul", "curl", "data.table", "devtools", "dplyr", "effects", "gap", "glue", "gridExtra", "hms", "httr", "irlba", "lazyeval", "lubridate", "Matrix", "MuMIn", "openssl", "pavo", "psych", "purrr", "quantreg", "R.utils", "raster", "Rcmdr", "RcppEigen", "rgbif", "rgdal", "rgeos", "rlang", "rstudioapi", "rvertnet", "segmented", "shiny", "spatstat", "spatstat.utils", "spdep", "stringi", "tibble", "tidyr", "tidyselect", "vegan", "wicket", "withr"))
devtools::install_github("nspope/corMLPE")
~/.Rprofile
.Rprofile
?Startup
R.home()
".Rprofile"
"~/.Rprofile"
Sys.setenv(TZ = “America/New_York”)
setme <-
"Sys.setenv(TZ='America/New_York') #some default not get any errors
invisible(loadNamespace('rgeolocate'))
invisible(loadNamespace('httr'))
mytz <- rgeolocate::ip_api(httr::content(httr::GET('https://api.ipify.org?format=json'))[1])[['timezone']]
Sys.setenv(TZ=mytz)"
cat(setme,file=file.path(R.home(),'etc/Rprofile.site'),sep='\n')
###########################################
#bioclim
#bio.new <- raster("/Users/Maggie/Desktop/bio_ProjectRaster.tif")
#bio.new <- raster("c:/Users/Maggie/Desktop/GIS_R/bio_ProjectRaster.tif")
#bio.new
#plot(bio.new)
bio30s <- raster("/Users/Maggie/Desktop/Bio_raster_redo/Plethodon_cinereus_avg.asc")
library(raster)
###########################################
#bioclim
#bio.new <- raster("/Users/Maggie/Desktop/bio_ProjectRaster.tif")
#bio.new <- raster("c:/Users/Maggie/Desktop/GIS_R/bio_ProjectRaster.tif")
#bio.new
#plot(bio.new)
bio30s <- raster("/Users/Maggie/Desktop/Bio_raster_redo/Plethodon_cinereus_avg.asc")
plot(bio30s)
sub.can5 <- raster("/Users/Maggie/Desktop/Bio_raster_redo/subset_canopy5.tif")
plot(sub.can5, main = "canopy", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
res.can <- raster("/Users/Maggie/Dropbox/Microsat_chapter/Resistance_GA/ResGA_mac_runs/Single_canopy_mac2.mid/canopy300.asc")
plot(res.can)
#This example aggregates your 30-m cells to 300 meter cells, and sets the value to the modal value of the 10x10 window around each cell.
forest300 <- aggregate(sub.can5, fact = 10, fun = modal)
plot(forest300, main = "canopy", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
res.can <- raster("/Users/Maggie/Dropbox/Microsat_chapter/Resistance_GA/ResGA_mac_runs/Single_canopy_mac2.mid/Results/canopy300.asc")
plot(res.can)
#gives the first file the same attributes as the second!
bio300<- projectRaster(bio30s, forest300)
###########################################
#bioclim
#bio.new <- raster("/Users/Maggie/Desktop/bio_ProjectRaster.tif")
#bio.new <- raster("c:/Users/Maggie/Desktop/GIS_R/bio_ProjectRaster.tif")
#bio.new
#plot(bio.new)
bio30s <- raster("/Users/Maggie/Desktop/Bio_raster_redo/Plethodon_cinereus_avg.asc")
#gives the first file the same attributes as the second!
bio300<- projectRaster(bio30s, forest300)
crs(bio30s) <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
#gives the first file the same attributes as the second!
bio300<- projectRaster(bio30s, forest300)
plot(bio300)
res.bio30s <- raster("/Users/Maggie/Desktop/Bio_raster_redo/ResGA_bio30s_runs/Bio_mac_all_LC1/Results/bio300.asc")
plot(res.bio30s)
res.bio30smid.cc <- raster("/Users/Maggie/Desktop/Bio_raster_redo/ResGA_bio30s_runs/Bio_mac.CC.mid1/Results/bio300.asc")
plot(res.bio30smid.cc)
res.bio30smid.lc <- raster("/Users/Maggie/Desktop/Bio_raster_redo/ResGA_bio30s_runs/Single_bio_mac2.mid2_LC2/Results/bio300.asc")
plot(res.bio30smid.lc)
require(mapdata)
map('world', interior=F,col="darkgray")
map('rivers', add=TRUE, col="blue")
map('ohio', interior=F,col="darkgray")
map("state", region=c("Ohio"), lwd=2, interior=FALSE, xlim=c(-85.5, -80), ylim=c(38.3, 42), bg="gray80", fill=TRUE, col="white")
map('rivers', add=TRUE, col="blue")
help('map')
res.dem.cir.m <- raster("/Users/Maggie/Dropbox/Resistance_GA_bio30s/Clust_mid_DEM_CC1/Results/DEM300.asc")
library("raster")
library("rgdal")
library("sp")
library("gdistance")
res.dem.cir.m <- raster("/Users/Maggie/Dropbox/Resistance_GA_bio30s/Clust_mid_DEM_CC1/Results/DEM300.asc")
plot(res.dem.cir.m)
res.dem.lcp.m <- raster("/Users/Maggie/Dropbox/Resistance_GA_bio30s/Single_DEM_mac1.mid/Results/DEM300.asc")
plot(res.dem.lcp.m)
plot(res.dem.lcp.m)
plot(res.dem.cir.m)
#Water
res.water.lcp <- raster("/Users/Maggie/Dropbox/Microsat_chapter/Resistance_GA_backup/All_Results/All_pops/All_LCP/Single_water_LCP1/Results/water3.asc")
plot(res.water.lcp)
res.multi.lcp.e <- raster("/Users/Maggie/Dropbox/Resistance_GA_bio30s/Multi.E.LC1/Results/subset_elevation.subset_canopy5.Plethodon_cinereus_avg.Reclass_erie_re2.Reclass_All_OH_river2.asc")
plot(res.multi.lcp.e)
#resistance surfaces
#bio
res.bio.cir <- raster("/Users/Maggie/Dropbox/Resistance_GA_bio30s/all_pops_bio30s/Results/bio300.asc")
plot(res.bio.cir)
dem_orig <- raster("/Users/Maggie/Desktop/Bio_raster_redo/subset_elevation.tif")
plot(dem_orig)
dem_orig
View(dem_orig)
plot(res.dem.cir.m)
plot(res.dem.lcp.m)
A.N <- c=(4.100, 4.100, 3.600, 5.000, 3.800,3.100,3.000,4.400,4.000,3.900,3.600,3.200,5.200,4.300,3.300,2.900,6.500,3.500,3.200,5.200,3.700,3.100,4.500,3.500,4.600,4.800,3.700,4.200)
A.N <- c(4.100, 4.100, 3.600, 5.000, 3.800,3.100,3.000,4.400,4.000,3.900,3.600,3.200,5.200,4.300,3.300,2.900,6.500,3.500,3.200,5.200,3.700,3.100,4.500,3.500,4.600,4.800,3.700,4.200)
mean(A.N)
std.error(A.N)
sd <- sqrt(var(A.N))
sd
library(maps)       # for creating geographical maps
library(mapdata)    # contains basic data to go along with 'maps' (topographic & geologic)
library(sp)         # classes and methods for spatial data
library(maptools)   # tools for reading and handling  spatial objects
library(gpclib)     # allow general polygon clipping library for R
gpclibPermit()
library(sfsmisc)    # utilities from Seminar fuer Statistik ETH Zurich
library(mapproj)    # for creating projected maps
library(raster)     # tools to deal with raster maps
library(scales)     # for transparency
# not installed correctly...
library(rgeos)      # interface to geometry engine - open source (GEOS)
library(rgdal)      # bindings for the geospatial data abstraction library
# pie charts on maps
library(mapplots)
help(mapply(function, ...))
help("map")
#USA map
map('usa')
map("state")
library(tidyverse)
packs = as.data.frame(installed.packages(.libPaths()[1]), stringsAsFactors = F)
install.packages(packs$Package)
install.packages(packs$Package)
install.packages(packs$Package)
/Library/Frameworks/R.framework/Versions/3.4.1/Resources/library
installed.packages()
/Library/Frameworks/R.framework/Versions/3.41/Resources/library
packs = as.data.frame(installed.packages(.libPaths()[1]), stringsAsFactors = F)
install.packages(packs$Package)
install.packages(packs$Package)
/Library/Frameworks/R.framework/Versions/x.xx/Resources/library
Library/Frameworks/R.framework/Versions/x.xx/Resources/library
setwd(Library/Frameworks/R.framework/Versions/x.xx/Resources/library)
"/Library/Frameworks/R.framework/Versions/x.xx/Resources/library"
Users/Maggie/Library/Frameworks/R.framework/Versions/x.xx/Resources/library
/Users/Maggie/Library/Frameworks/R.framework/Versions/x.xx/Resources/library
install.packages(c("digest", "effects", "fitdistrplus", "globals", "later", "magic", "maptools", "piecewiseSEM", "Rcmdr", "RcmdrMisc", "reprex", "robustbase", "spData", "xts", "zoo"))
install.packages(c("later", "maptools", "reprex"))
update.packages(checkBuilt = TRUE, ask = FALSE)
###FOR REQUIRED PART OF LAB
library(phyloclim);
#Calculating PNO
library(hypervolume);
#Analyze niche as an n-dimensional hypervolume
library(raster);
#Always
library(RStoolbox);
install.packages("data.table")
#Calculating PNO
library(hypervolume);
install.packages("data.table")
#Calculating PNO
library(hypervolume);
install.packages("data.table")
devtools::install_github("ropensci/rnoaa")
library("rnoaa")
install.packages("lawn")
library(lawn)
library(sp)
lirary(dplyr)
library(dplyr)
library(c(lawn, sp, dplyr))
library(lawn)
library(sp)
library(dplyr)
lawn_bbox_polygon(c(-122.2047, 47.5204, -122.1065, 47.6139)) %>% view
lawn_bbox_polygon(c(-122.2047, 47.5204, -122.1065, 47.6139))
lawn_bbox_polygon(c(-122.2047, 47.5204, -122.1065, 47.6139)) %>% view
help("lawn_bbox_polygon")
lawn_bbox_polygon(bbox)
bbox <- c(0, 0, 10, 10)
lawn_bbox_polygon(bbox)
lawn_bbox_polygon(bbox) %>% view
lawn_bbox_polygon(bbox) %>% view
lawn_bbox_polygon(c(-122.2047, 47.5204, -122.1065, 47.6139)) %>% view
library(lawn)
ncdc(datasetid = 'GHCND', stationid = 'GHCND:USW00014895', startdate = '2013-10-01',
enddate = '2013-12-01')
https://www.ncdc.noaa.gov/cdo-web/api/v2/{endpoint}
ncdc(datasetid = 'GHCND', stationid = 'GHCND:USW00014895', startdate = '2013-10-01',
enddate = '2013-12-01')
#devtools::install_github("ropensci/rnoaa")
library("rnoaa")
ncdc(datasetid = 'GHCND', stationid = 'GHCND:USW00014895', startdate = '2013-10-01',
enddate = '2013-12-01')
-> GET /cdo-web/api/v2/stations/GHCND:USC00084289?datasetid=GHCND&locationid=FIPS%3A12017 HTTP/1.1
GET /cdo-web/api/v2/stations/GHCND:USC00084289?datasetid=GHCND&locationid=FIPS%3A12017 HTTP/1.1
options(noaakey = "tutllhkOynLKzDWOjLjaDApnXYOZkOCT")
ncdc(datasetid = 'GHCND', stationid = 'GHCND:USW00014895', startdate = '2013-10-01',
enddate = '2013-12-01')
lawn_bbox_polygon(c(-122.2047, 47.5204, -122.1065, 47.6139)) %>% view
ncdc_stations(extent = c(47.5204, -122.2047, 47.6139, -122.1065))
dat <- ghcnd(stationid = "AGE00147704")
dat$data %>% filter(element == "PRCP", year == 1909)
dat$data %>%
filter(element == "PRCP", year == 1909)
dat
dat <- ghcnd(stationid = "AGE00147704")
dat$data %>%
filter(element == "PRCP", year == 1909)
library(dplyr)
dat <- ghcnd(stationid = "AGE00147704")
dat$data %>%
filter(element == "PRCP", year == 1909)
dat$data %>%
dat$data %>%
filter(element == "PRCP", year == 1909)
help("ghcnd")
dat <- ghcnd(stationid = "GHCND:US1WAKG0024")
dat <- ghcnd(stationid = "US1WAKG0024 ")
ghcnd_search("AGE00147704", var = "PRCP")
MI_Monthly <- ncdc(datasetid = "GHCNDMS", locationid = "FIPS:26065", stationid = "GHCND:USW00014836",
datatypeid = "TPCP", startdate = "2000-01-01", enddate = "2010-01-01", limit = 1000,
token = tutllhkOynLKzDWOjLjaDApnXYOZkOCT)
MI_Monthly <- ncdc(datasetid = "GHCNDMS", locationid = "FIPS:26065", stationid = "GHCND:USW00014836",
datatypeid = "TPCP", startdate = "2000-01-01", enddate = "2010-01-01", limit = 1000,
token = "tutllhkOynLKzDWOjLjaDApnXYOZkOCT")
ncdc_plot(MI_Monthly, breaks = "12 months", dateformat = "%Y")
dat <- ghcnd(stationid = "AGE00147704")
dat$data %>%
filter(element == "PRCP", year == 1909, token = "tutllhkOynLKzDWOjLjaDApnXYOZkOCT")
ghcnd_search("AGE00147704", var = "PRCP")
ghcnd_search("AGE00147704", var = "PRCP", token = "tutllhkOynLKzDWOjLjaDApnXYOZkOCT")
ghcnd_search("AGE00147704", var = "PRCP", token = "tutllhkOynLKzDWOjLjaDApnXYOZkOCT")
stations <- ghcnd_stations()
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
(res <- isd(usaf = "011490", wban = "99999", year = 1986))
View(res)
help("isd")
(res <- isd(usaf = "011490", wban = "99999", year = 2015))
View(res)
(res <- isd(usaf = "011490", wban = "99999", year = 2000))
View(res)
slice <- c(1,1)
my.col <- c("red","black")
pie(slice, col=my.col)
butterflies <- getimg(system.file("testdata/images/", package = 'pavo'))
install.packages("pavo")
library(pavo)
butterflies <- getimg(system.file("testdata/images/", package = 'pavo'))
is.rimg(butterflies)
str(butterflies[[1]])
butterflies
str(butterflies[[2]])
help(str)
plot(butterflies[[1]])
butterflies <- procimg(butterflies, scaledist = 100)
butterflies <- procimg(butterflies, outline = TRUE, iterations = 1)
butterflies_class <- classify(butterflies, kcols = c(4, 3))
summary(butterflies_class[[2]], plot = TRUE)
butterflies_class <- classify(butterflies, kcols = c(4, 3))
butterflies_class <- classify(butterflies, refID = 1, kcols = 3)
butterflies_class <- classify(butterflies, interactive = TRUE)
butterflies_class <- classify(butterflies, refID = 1, interactive = TRUE)
IDlist <- c('DSC_0004', 'DSC_0016')
extension <- '.jpg'
colorChecker(IDlist, extension)
help(patternize)
colorChecker(IDlist, extension)
library(patternize)
colorChecker(IDlist, extension)
citation()
R.version
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
install.packages(missing)
update.packages()
install.packages("ggplot2")
library(sp)
install.packages("sp")
install.packages("pavo")
install.packages("lme4")
install.packages("ape")
install.packages("devtools")
install.packages("tidyverse")
(setwd("/Users/Maggie/Desktop/PEMA_final_body_mass/")
(setwd("/Users/Maggie/Desktop/Data_carpentry/"))
(setwd("/Users/Maggie/Desktop/Data_carpentry/"))
mean.N.spring <- c(23.4,17.27,14.13,8.93,8.27,9.07,8.53,6.47)
mean.N.sp.sites <- c("SVF (S)", "CF (S)", "CV (S)", "CV (U)", "EW (S)", "EW (U)", "EH (U)", "SBI (U)")
###mean number and volume plots. P.cinereus diet
library(ggplot2)
N.spring <- cbind(mean.N.sp.sites, mean.N.spring)
View(N.spring)
mean.N.spring <- c(23.4,17.27,14.13,8.93,8.27,9.07,8.53,6.47)
std.dev.N.spring <- c(32.69,10.66,8.55,6.97,11.93,8.86,5.57,4.55)
N.spring <- cbind(mean.N.sp.sites, mean.N.spring, std.dev.N.spring)
View(N.spring)
mean.N.spring <- c(23.4,17.27,14.13,8.93,8.27,9.07,8.53,6.47)
std.dev.N.spring <- c(32.69,10.66,8.55,6.97,11.93,8.86,5.57,4.55)
mean.N.sp.sites <- c("SVF (S)", "CF (S)", "CV (S)", "CV (U)", "EW (S)", "EW (U)", "EH (U)", "SBI (U)")
Morph <- c("Striped", "Striped", "Striped", "Unstriped", "Striped", "Unstriped", "Unstriped", "Unstriped")
N.spring <- cbind(mean.N.sp.sites, mean.N.spring, std.dev.N.spring, Morph)
View(N.spring)
p.n.sp <- ggplot(N.spring, aes(x=mean.N.sp.sites, y=mean.N.spring, fill=Morph)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean.N.spring-std.dev.N.spring, ymax=mean.N.spring+std.dev.N.spring), width=.2,
position=position_dodge(.9))
is.data.frame(N.spring)
as.data.frame(N.spring)
is.data.frame(N.spring)
N.spring.df <- as.data.frame(N.spring)
is.data.frame(N.spring.df)
p.n.sp <- ggplot(N.spring.df, aes(x=mean.N.sp.sites, y=mean.N.spring, fill=Morph)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean.N.spring-std.dev.N.spring, ymax=mean.N.spring+std.dev.N.spring), width=.2,
position=position_dodge(.9))
p.n.sp + labs(title="Mean N Spring",
x="Site", y = "Mean N")+
scale_fill_manual(values=c('black','lightgray'))+
theme_classic()
View(N.spring.df)
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
version
setwd("/Users/Maggie/Dropbox/Mammal_SSD/Mammal_SSD_github/")
######################################################
#gridding
library(sf)
library(raster)
library(tidyverse)
library(dplyr)
setwd("/Users/Maggie/Dropbox/Mammal_SSD/Mammal_SSD_github/")
mammal_dist <- rnaturalearth::ne_countries(country = c("United States of America", "Mexico", "Canada"),returnclass = "sf")
plot(mammal_dist)
mammal_dist<-st_transform(test2, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"))
mammal_dist<-st_transform(mammal_dist, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"))
plot(mammal_dist)
grids_100000 <- st_make_grid(mammal_dist, cellsize = c(100000, 100000)) %>% st_intersection(mammal_dist)
plot(grids_100000)
grids_100000 <- mutate(st_sf(geometry = grids_100000), id_cells = 1:n())
plot(grids_100000)
##################
#Mammal BM data
Mammal_BM <- read.csv("Mammal_spatial_BM_extended.csv", header = TRUE, stringsAsFactors = FALSE)
str(Mammal_BM)
plyr::count(Mammal_BM$binomial2)
###Subset to the species of interest
Mammal_BM_SSD <- Mammal_BM %>% filter(binomial2 = 'Microtus_californicus')
###Subset to the species of interest
Mammal_BM_SSD <- Mammal_BM %>% filter(binomial2 == 'Microtus_californicus')
View(Mammal_BM_SSD)
###Subset to the species of interest
Mammal_BM_SSD <- Mammal_BM %>% filter(binomial2 == c('Microtus_californicus', 'Microtus_longicaudus'))
Mammal_BM_SSD <- subset(Mammal_BM, binomial2 == "Microtus_longicaudus")
Mammal_BM_SSD <- subset(Mammal_BM, binomial2 == c("Microtus_californicus","Microtus_longicaudus"))
###Subset to the species of interest
Mammal_BM_SSD <- Mammal_BM %>% filter(binomial2 = c('Microtus_californicus', 'Microtus_longicaudus'))
=
###Subset to the species of interest
Mammal_BM_SSD <- Mammal_BM %>% filter(binomial2 == c('Microtus_californicus', 'Microtus_longicaudus'))
###Subset to the species of interest
Mammal_BM_SSD <- Mammal_BM %>% filter(binomial2 == 'Microtus_californicus' | binomial2 == 'Microtus_longicaudus')
table(Mammal_BM_SSD$binomial2)
plyr::count(Mammal_BM_SSD$binomial2)
plyr::count(Mammal_BM$binomial2)
###Subset to the species of interest
Mammal_BM_SSD <- Mammal_BM %>% filter(binomial2 == 'Microtus_californicus' | binomial2 == 'Microtus_longicaudus' | binomial2 == 'Microtus_montanus')
plyr::count(Mammal_BM_SSD$binomial2)
###Subset to the species of interest
Mammal_BM_SSD <- Mammal_BM %>% filter(binomial2 == 'Microtus_californicus' | binomial2 == 'Microtus_longicaudus' | binomial2 == 'Microtus_montanus' |
binomial2 == 'Microtus_ochrogaster')
plyr::count(Mammal_BM_SSD$binomial2)
###Subset to the species of interest
Mammal_BM_SSD <- Mammal_BM %>% filter(binomial2 == 'Microtus_californicus' | binomial2 == 'Microtus_longicaudus' | binomial2 == 'Microtus_montanus' |
binomial2 == 'Microtus_ochrogaster' | binomial2 == 'Microtus_oregoni' | binomial2 == 'Microtus_pennsylvanicus' |
binomial2 == 'Microtus_pinetorum' | binomial2 == 'Microtus_townsendii')
plyr::count(Mammal_BM_SSD$binomial2)
plyr::count(Mammal_BM$binomial2)
plyr::count(Mammal_BM_SSD$binomial2)
###Subset to the species of interest
Mammal_BM_SSD <- Mammal_BM %>% filter(binomial2 == 'Microtus_californicus' | binomial2 == 'Microtus_longicaudus' | binomial2 == 'Microtus_montanus' |
binomial2 == 'Microtus_ochrogaster' | binomial2 == 'Microtus_oregoni' | binomial2 == 'Microtus_pennsylvanicus' |
binomial2 == 'Microtus_pinetorum' | binomial2 == 'Microtus_townsendii' |
binomial2 == 'Peromyscus_boylii' | binomial2 == 'Peromyscus_crinitus' | binomial2 == 'Peromyscus_eremicus' |
binomial2 == 'Peromyscus_leucopus' | binomial2 == 'Peromyscus_maniculatus' | binomial2 == 'Peromyscus_truei')
plyr::count(Mammal_BM_SSD$binomial2)
plyr::count(Mammal_BM$binomial2)
plyr::count(Mammal_BM_SSD$binomial2)
##################
#Mammal HBL data
Mammal_HBL <- read.csv("Mammal_spatial_HBL_extended.csv", header = TRUE, stringsAsFactors = FALSE)
str(Mammal_HBL)
plyr::count(Mammal_HBL$binomial2)
View(Mammal_HBL)
###Subset to the species of interest
Mammal_HBL_SSD <- Mammal_HBL %>% filter(binomial2 == 'Microtus_californicus' | binomial2 == 'Microtus_longicaudus' | binomial2 == 'Microtus_montanus' |
binomial2 == 'Microtus_ochrogaster' | binomial2 == 'Microtus_oregoni' | binomial2 == 'Microtus_pennsylvanicus' |
binomial2 == 'Microtus_pinetorum' | binomial2 == 'Microtus_townsendii' |
binomial2 == 'Peromyscus_boylii' | binomial2 == 'Peromyscus_crinitus' | binomial2 == 'Peromyscus_eremicus' |
binomial2 == 'Peromyscus_leucopus' | binomial2 == 'Peromyscus_maniculatus' | binomial2 == 'Peromyscus_truei')
plyr::count(Mammal_HBL$binomial2)
plyr::count(Mammal_HBL_SSD$binomial2)
table(Mammal_BM_SSD$sex)
str(Mammal_BM)
table(Mammal_BM_SSD$decimallatitude)
is.na(Mammal_BM_SSD$decimallatitude)
table(Mammal_HBL_SSD$sex)
setwd("/Users/Maggie/Dropbox/Mammal_SSD/Mammal_SSD_github/")
mammal_dist <- rnaturalearth::ne_countries(country = c("United States of America", "Mexico", "Canada"),returnclass = "sf")
plot(mammal_dist)
mammal_dist <-st_transform(mammal_dist, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"))
plot(mammal_dist)
grids_100000 <- st_make_grid(mammal_dist, cellsize = c(100000, 100000)) %>% st_intersection(mammal_dist)
plot(grids_100000)
grids_100000 <- mutate(st_sf(geometry = grids_100000), id_cells = 1:n())
plot(grids_100000)
##################
#Mammal BM data
Mammal_BM <- read.csv("Mammal_spatial_BM_extended.csv", header = TRUE, stringsAsFactors = FALSE)
str(Mammal_BM)
plyr::count(Mammal_BM$binomial2)
###Subset to the species of interest
Mammal_BM_SSD <- Mammal_BM %>% filter(binomial2 == 'Microtus_californicus' | binomial2 == 'Microtus_longicaudus' | binomial2 == 'Microtus_montanus' |
binomial2 == 'Microtus_ochrogaster' | binomial2 == 'Microtus_oregoni' | binomial2 == 'Microtus_pennsylvanicus' |
binomial2 == 'Microtus_pinetorum' | binomial2 == 'Microtus_townsendii' |
binomial2 == 'Peromyscus_boylii' | binomial2 == 'Peromyscus_crinitus' | binomial2 == 'Peromyscus_eremicus' |
binomial2 == 'Peromyscus_leucopus' | binomial2 == 'Peromyscus_maniculatus' | binomial2 == 'Peromyscus_truei')
plyr::count(Mammal_BM_SSD$binomial2)
table(Mammal_BM_SSD$sex)
##################
#Mammal HBL data
Mammal_HBL <- read.csv("Mammal_spatial_HBL_extended.csv", header = TRUE, stringsAsFactors = FALSE)
str(Mammal_HBL)
plyr::count(Mammal_HBL$binomial2)
###Subset to the species of interest
Mammal_HBL_SSD <- Mammal_HBL %>% filter(binomial2 == 'Microtus_californicus' | binomial2 == 'Microtus_longicaudus' | binomial2 == 'Microtus_montanus' |
binomial2 == 'Microtus_ochrogaster' | binomial2 == 'Microtus_oregoni' | binomial2 == 'Microtus_pennsylvanicus' |
binomial2 == 'Microtus_pinetorum' | binomial2 == 'Microtus_townsendii' |
binomial2 == 'Peromyscus_boylii' | binomial2 == 'Peromyscus_crinitus' | binomial2 == 'Peromyscus_eremicus' |
binomial2 == 'Peromyscus_leucopus' | binomial2 == 'Peromyscus_maniculatus' | binomial2 == 'Peromyscus_truei')
plyr::count(Mammal_HBL_SSD$binomial2)
table(Mammal_HBL_SSD$sex)
View(Mammal_HBL_SSD)
#############
#Grid mammal BM
#coords=1,2 long and lat
BM_grid <- st_transform(st_as_sf(Mammal_BM_SSD, coords=1:2, crs =4326), crs=st_crs(mammal_dist)$proj4string)
view(BM_grid)
View(Mammal_BM_SSD)
#view(BM_grid)
BM_grid_cells = st_join(BM_grid, grids_100000)
view(BM_grid_cells)
#view(BM_grid_cells)
str(BM_grid_cells)
BM_grid_cells <- BM_grid_cells %>% drop_na(id_cells)
#############
#Grid mammal HBL
#coords=1,2 long and lat
HBL_grid <- st_transform(st_as_sf(Mammal_HBL_SSD, coords=1:2, crs =4326), crs=st_crs(mammal_dist)$proj4string)
#view(HBL_grid)
HBL_grid_cells = st_join(HBL_grid, grids_100000)
#view(HBL_grid_cells)
str(HBL_grid_cells)
HBL_grid_cells <- HBL_grid_cells %>% drop_na(id_cells)
View(HBL_grid_cells)
write_csv(BM_grid_cells, "Mammal_SSD_BM_grids.csv", row.names = F)
write.csv(BM_grid_cells, "Mammal_SSD_BM_grids.csv", row.names = F)
write.csv(HBL_grid_cells, "Mammal_SSD_HBL_grids.csv", row.names = F)
